<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop001——mapreduce概述</title>
    <url>/2021/12/12/Hadoop001%E2%80%94%E2%80%94mapreduce%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>Hive架构入门</title>
    <url>/2021/12/12/Hive001%E2%80%94%E2%80%94%E6%9E%B6%E6%9E%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数仓</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop003——HDFS概述</title>
    <url>/2021/12/12/Hadoop003%E2%80%94%E2%80%94HDFS%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>hdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>OLAP001——大数据OLAP引擎对比分析</title>
    <url>/2021/12/12/OLAP001%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AEOLAP%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>可以大致将 OLAP 分为 ROLAP 和 MOLAP 两类。</p>
<ul>
<li><p>ROLAP：即关系型 OLAP，通过对原始明细数据实时聚合计算的方式来进行数据查询。比如 Presto、ClickHouse 等 OLAP 引擎。</p>
</li>
<li><p>MOLAP： 即多维型 OLAP，通过摄入数据时对原始明细数据进行预聚合加工处理，然后通过预聚合数据来进行数据查询。比如 Kylin、Druid 等 OLAP 引擎。</p>
<span id="more"></span>    </li>
</ul>
<p>接下来，针对这两类不同的 OLAP 场景，我们再从技术、性能、原理和应用场景这几个标准展开进行细致的选型分析。</p>
<h3 id="关系型-OLAP-如何选型？"><a href="#关系型-OLAP-如何选型？" class="headerlink" title="关系型 OLAP 如何选型？"></a><strong>关系型 OLAP 如何选型？</strong></h3><p>首先，我们通过 Presto 和 ClickHouse 来看看关系型 OLAP 怎么选型。</p>
<h4 id="Presto"><a href="#Presto" class="headerlink" title="Presto"></a><strong>Presto</strong></h4><p>Presto 是由 Facebook 开发的开源大数据分布式高性能 SQL 查询引擎，和 Hive 还有一定的关系。Facebook 最开始是使用 Hive 来进行交互式查询分析的，但 Hive 是基于 MapReduce 为批处理设计的。在交互式查询场景，MapReduce 的延时很高，满足不了用户想要快速出结果的需求。为了解决这个问题，Presto 就被开发出来了。它通过 Pipeline、全内存计算、动态代码生成等技术，来实现交互式分析查询，提供了分钟级乃至秒级低延时的查询性能。Presto 最大的特点就是，它能够直接查询 Hive/HDFS 上的数据，并快速分析，SQL 支持的特性也相对完善，以便数据分析师快速查询数据湖 / 数据仓库内的数据。以下是 Presto 的查询原理：</p>
<img src="/2021/12/12/OLAP001%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AEOLAP%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/1.png" alt="1">

<p>​        需要注意的是，Presto 通常是从原始明细数据进行查询，所以它的性能比 Hive 和 Spark 更好。但它是全内存的设计（虽然也有相应的 Spill to Disk 机制，但是目前业界使用的较少），在查询大数据量的时候，可能会因为内存不够导致查询异常。这种情况下，我们可以增加硬件资源，或者可以选择 Spark Thrift Server 来进行这类大查询的分析。目前，主要用 Presto 分析离线数据，也可以分析近实时的数据，但技术尚不成熟。</p>
<h4 id="ClickHouse"><a href="#ClickHouse" class="headerlink" title="ClickHouse"></a><strong>ClickHouse</strong></h4><p>​        和 Presto 一样，ClickHouse 也是一款实时 / 离线 OLAP 引擎，由号称 “俄罗斯 Google” 的 Yandex 开发而来。它的性能非常出色，从官方 Benchmark 来看，特别是单表查询，比 Presto、Impala 等关系型 OLAP 引擎都要快。这是因为，ClickHouse 主要使用了列式存储、向量化引擎、代码编译生成等技术去实现的。使用类似技术的产品有很多比如 Presto，但 ClickHouse 为什么那么快呢？这是因为 <strong>ClickHouse 还采用了自下而上的设计，极度关注底层实现性能</strong>，使用 C++ Native 语言开发，经过了各种数据结构和算法优化、代码级优化等。我们来看看 ClickHouse 的组件原理：</p>
<img src="/2021/12/12/OLAP001%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AEOLAP%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/2.webp" alt="2" style="zoom:80%;">

<p>我来解释图中的 3 个核心组件吧。</p>
<ul>
<li>Shard 表示数据库分片，可以将一张海量的表进行切分存储。</li>
<li>Replica 表示数据库副本，依赖 ZooKeeper 进行协调复制做到高可用。</li>
<li>Distributed Tables 它代表分布式表。ClickHouse 通过逻辑映射将查询任务转发给不同分片的本地表，最后 Merge 查询结果。</li>
</ul>
<p>你或许要问了，这 3 个核心组件怎么体现出 ClickHouse 单表查询性能的出色呢？首先是<strong>储存上，ClickHouse 的存储采用了 Merge Tree</strong>。Merge Tree 的核心思想是，数据按照主键排序，每次写入都会根据数据分区形成一个个的 Parts 文件，服务器后台会不断合并 Parts 来减少读放大。当 MergeTree Merge 的速度低于插入形成 Parts 的速度，会出现 Too Many Parts 等类似错误。因此，官方要求一定要使用批量写入机制。这里你需要注意的是，ClickHouse 的主键与 MySQL 等数据库不同，主键不是唯一的，主键索引更加稀疏。ClickHouse 将每列数据按照 index granularity（默认 8192 行）进行划分，这样做，条目相对稠密索引较少，能够将其加载到内存，而且对插入时建立索引的成本相对较小。</p>
<p>那么，查找的时候 ClickHouse 是如何通过索引来快速进行数据过滤呢？这就涉及到 <strong>ClickHouse 为每一列建立的 mrk 标记文件，mrk 文件与主键索引对齐，用于记录数据在数据文件中的偏移量信息</strong>。我们通过 ClickHouse 查询时，首先对主键索引进行二分查找，定位到对应的 mrk 标记文件，进而在 mrk 文件里搜索找到对应数据文件的偏移量，最终扫描得到相应的数据。避免了全表扫描，从而加速了查询。</p>
<h3 id="多维型-OLAP-如何选型？"><a href="#多维型-OLAP-如何选型？" class="headerlink" title="多维型 OLAP 如何选型？"></a><strong>多维型 OLAP 如何选型？</strong></h3><p>讲完对关系型 OLAP 的选型分析，下面让我们借着 Kylin 和 Druid 来看看多维性 OLAP 怎么选型。</p>
<h4 id="Kylin"><a href="#Kylin" class="headerlink" title="Kylin"></a><strong>Kylin</strong></h4><p>Kylin 是一款最具代表性的多维型 OLAP 引擎，它支持 Kafka、Hive、RDBMS 的数据源，一直以强大的分析能力和丰富的周边生态备受欢迎。Kylin 支持通过离线 / 实时预计算的方式，将原始明细数据的各种维度组合进行预聚合处理保存，最终将完全命中 Cube 的聚合查询转换为简单的 select 操作。底层存储配合 HBase 的高吞吐和低延时，能达到毫秒级的查询性能。此外，Cube 还可以减少不必要的预算，不过，Cube 创建后无法修改，需要在灵活性和计算成本之间取舍。我们通过下面的示意图，学习下 Kylin 的组件原理：</p>
<img src="/2021/12/12/OLAP001%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AEOLAP%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/3.webp" alt="3" style="zoom:50%;">

<p><strong>左侧蓝色部分代表数据源</strong>：Kylin 支持 Kafka、Hive、RDBMS 的数据源，生态较为丰富。</p>
<p><strong>右侧粉色部分表示 Cube 存储</strong>：截止目前 Kylin 4.0 版本，Kylin 支持 HBase 存储和 Parquet 存储。</p>
<p><strong>我们继续看中间的黄色部分。</strong></p>
<p><strong>Query Engine</strong>：在 Kylin 3.x 中，QueryEngine 可以说是由 HBase Coprocessor、Calcite 组成以满足低 RT 的存储；在 Kylin 4.x 中，QueryEngine 完全交由 Spark 实现。</p>
<p><strong>BuildEngine</strong>：目前 Kylin 的构建引擎支持 Spark 和 MapReduce 两种计算框架，其中 Spark 在 Cuboid 构建的过程中避免了层与层之间的落盘，效率更加高效。</p>
<p><strong>MetaData</strong>：MetaData 主要保存了 Cube 元信息、构建信息，支持 HBase 和 MySQL。</p>
<p><strong>Routing</strong>：在 Cuboid 没有命中的情况下，Kylin 支持查询 Fall back 到原始数据，当然 RT 比直接命中 cuboid 会更高一些。</p>
<h4 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a><strong>Druid</strong></h4><p>我们再看看同为实时 / 离线 OLAP 引擎的 Druid 。它是通过位图索引、字典编码、预聚合计算等技术实现的。Druid 的预聚合计算技术，是对最细粒度维度组合进行了预聚合计算，所以查询时，会基于这份预聚合数据再进行实时聚合计算。这种方式比起完全从原始明细数据查询，虽然降低了灵活度，却提高了查询性能；而且，因为不是预聚合所有可能的维度组合，也改善了维度爆炸的问题。以下是 Druid 的组件原理图：</p>
<img src="/2021/12/12/OLAP001%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AEOLAP%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/4.webp" alt="4">

<p><strong>Master</strong>: 运行 Coordinator 和 Overlord 节点，负责管理数据的可用，均衡和摄入分配。</p>
<p><strong>Query</strong>: 运行 Broker 和 Router 节点，负责数据的查询。</p>
<p><strong>Data</strong>: 运行 Historical 和 MiddleManager 节点，执行实时和离线的数据存储和导入。</p>
<p>需要注意的是，Druid 对实时 / 离线数据的分析，是把 Kafka 的实时数据和 HDFS 的 离线数据通过摄入修正补偿的方式，形成一个典型的 Lambda 架构。实时数据摄入方面，可以使用 Kafka Index Service 来保证不丢不重（Exactly Once）的递交语义。虽然如此，但是目前 Druid 查询时会使用 TopN 以及 HLL 非精确去重等方式。因此，Druid 还是比较适合对分析数据精度要求不那么高的场景。当然，业界也有一些尝试，比如 Druid 使用 Bitmap 的技术去做精确去重。不过当维度多、基数大的情况下，预聚合能力就不再有那么好的效果，实时聚合的效率也不那么高。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>汇总了这四款 OLAP 引擎的其它特性，参考：</p>
<p><img src="/2021/12/12/OLAP001%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AEOLAP%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/5.webp" alt="5"></p>
<p>可以得出结论：</p>
<ul>
<li><strong>Presto 定位在交互式查询、数据湖 / 数据仓库快速分析、BI 灵活报表等场景</strong>。但是就目前来说，Presto 是从原始明细数据进行查询，性能一般，也无法用于实时场景。</li>
<li><strong>ClickHouse 定位在拥有一定灵活度、维度较多、聚合度不高的分析类场景</strong>，比如用户行为分析、日志分析等场景。</li>
<li><strong>Kylin 定位在离线分析类场景，特别是对数据量非常大、查询性能要求非常高的场景</strong>。</li>
<li><strong>Druid 定位在实时分析类场景</strong>，但由于其 SQL 支持程度相对较低、无法精确查询等问题，<strong>一般用在日志、监控分析等场景</strong>。</li>
</ul>
<p>目前大数据领域 OLAP 引擎很多，但后期随着社区和生态的不断发展壮大，引擎功能应该会不断地完善、补齐、优化，最终朝着一站式 OLAP 引擎的方向发展，甚至是多模数据库引擎的方向去发展。</p>
<img src="/2021/12/12/OLAP001%E2%80%94%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AEOLAP%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/WechatIMG125.jpeg" alt="WechatIMG125" style="zoom:67%;">

<blockquote>
<p>参考文章：</p>
<p><a href="https://time.geekbang.org/dailylesson/detail/100075735">https://time.geekbang.org/dailylesson/detail/100075735</a></p>
</blockquote>
]]></content>
      <categories>
        <category>OLAP</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>clickhouse</tag>
        <tag>Olap</tag>
      </tags>
  </entry>
  <entry>
    <title>Clickhouse架构及入门</title>
    <url>/2021/12/12/clickhouse001%E2%80%94%E2%80%94%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>Olap002——superset概述</title>
    <url>/2021/12/12/olap002%E2%80%94%E2%80%94superset%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>OLAP</category>
      </categories>
  </entry>
  <entry>
    <title>Olap003——hue概述</title>
    <url>/2021/12/12/olap003%E2%80%94%E2%80%94hue%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>OLAP</category>
      </categories>
      <tags>
        <tag>hue</tag>
      </tags>
  </entry>
  <entry>
    <title>Presto概述</title>
    <url>/2021/12/12/presto001%E2%80%94%E2%80%94%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>presto</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark001——运行结构&amp;作业执行流程</title>
    <url>/2021/12/12/spark001%E2%80%94%E2%80%94%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%84-%E4%BD%9C%E4%B8%9A%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>spark002——RDD算子入门</title>
    <url>/2021/12/12/spark002%E2%80%94%E2%80%94RDD%E7%AE%97%E5%AD%90%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
        <tag>RDD</tag>
      </tags>
  </entry>
  <entry>
    <title>半小时漫画三国演义</title>
    <url>/2021/11/29/%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>在杭州003——湘湖</title>
    <url>/2021/12/12/%E5%9C%A8%E6%9D%AD%E5%B7%9E003%E2%80%94%E2%80%94%E6%B9%98%E6%B9%96/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杭州记录</category>
      </categories>
      <tags>
        <tag>杭州旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>数仓001——数据集市概述</title>
    <url>/2021/12/12/%E6%95%B0%E4%BB%93001%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%9B%86%E5%B8%82%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数仓</category>
      </categories>
  </entry>
  <entry>
    <title>在杭州002——宜家</title>
    <url>/2021/12/12/%E5%9C%A8%E6%9D%AD%E5%B7%9E002%E2%80%94%E2%80%94%E5%AE%9C%E5%AE%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杭州记录</category>
      </categories>
      <tags>
        <tag>杭州旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>在杭州006——横店影视城</title>
    <url>/2021/12/12/%E5%9C%A8%E6%9D%AD%E5%B7%9E006%E2%80%94%E2%80%94%E6%A8%AA%E5%BA%97%E5%BD%B1%E8%A7%86%E5%9F%8E/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杭州记录</category>
      </categories>
      <tags>
        <tag>杭州旅游</tag>
        <tag>金华</tag>
      </tags>
  </entry>
  <entry>
    <title>数仓002——数仓知识入门</title>
    <url>/2021/12/12/%E6%95%B0%E4%BB%93002%E2%80%94%E2%80%94%E6%95%B0%E4%BB%93%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数仓</category>
      </categories>
  </entry>
  <entry>
    <title>在杭州005——宝石山</title>
    <url>/2021/12/12/%E5%9C%A8%E6%9D%AD%E5%B7%9E005%E2%80%94%E2%80%94%E5%AE%9D%E7%9F%B3%E5%B1%B1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杭州记录</category>
      </categories>
      <tags>
        <tag>杭州旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>在杭州001——云栖竹径</title>
    <url>/2021/12/12/%E5%9C%A8%E6%9D%AD%E5%B7%9E001%E2%80%94%E2%80%94%E4%BA%91%E6%A0%96%E7%AB%B9%E5%BE%84/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杭州记录</category>
      </categories>
      <tags>
        <tag>杭州旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>数仓004——数据质量</title>
    <url>/2021/12/12/%E6%95%B0%E4%BB%93004%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数仓</category>
      </categories>
  </entry>
  <entry>
    <title>数仓003——元数据</title>
    <url>/2021/12/12/%E6%95%B0%E4%BB%93003%E2%80%94%E2%80%94%E5%85%83%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数仓</category>
      </categories>
  </entry>
  <entry>
    <title>在杭州004——八卦田</title>
    <url>/2021/12/12/%E5%9C%A8%E6%9D%AD%E5%B7%9E004%E2%80%94%E2%80%94%E5%85%AB%E5%8D%A6%E7%94%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杭州记录</category>
      </categories>
      <tags>
        <tag>杭州旅游</tag>
      </tags>
  </entry>
</search>
